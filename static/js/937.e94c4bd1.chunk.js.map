{"version":3,"file":"LNADigital/static/js/937.e94c4bd1.chunk.js","mappings":"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","sources":["common/Button/styles.ts","common/Button/index.tsx","components/Block/styles.ts","components/Block/index.tsx","common/Input/styles.ts","common/TextArea/styles.tsx","common/Input/index.tsx","common/TextArea/index.tsx","components/ContactForm/styles.ts","components/ContactForm/index.tsx","common/utils/useForm.tsx"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const StyledButton = styled(\"button\")<any>`\n  background: ${(p) => p.color || \"#212738ff\"};\n  color: ${(p) => (p.color ? \"#212738ff\" : \"#fff\")};\n  font-size: 1rem;\n  font-weight: 700;\n  width: 100%;\n  border: 1px solid #edf3f5;\n  border-radius: 4px;\n  padding: 13px 0;\n  cursor: pointer;\n  margin-top: 0.625rem;\n  max-width: 180px;\n  transition: all 0.3s ease-in-out;\n  box-shadow: 0 16px 30px rgb(23 31 114 / 20%);\n\n  &:hover,\n  &:active,\n  &:focus {\n    color: #fff;\n    border: 1px solid rgb(187, 0, 0);\n    background-color: rgb(187, 0, 0);\n  }\n`;\n","import { StyledButton } from \"./styles\";\nimport { ButtonProps } from \"../types\";\n\nexport const Button = ({\n  color,\n  fixedWidth,\n  children,\n  onClick,\n  className\n}: ButtonProps) => (\n  <StyledButton color={color} className={className} fixedWidth={fixedWidth} onClick={onClick}>\n    {children}\n  </StyledButton>\n);\n","import styled from \"styled-components\";\n\nexport const Content = styled(\"p\")`\n  margin-top: 1.5rem;\n`;\n\nexport const Container = styled(\"div\")`\n  position: relative;\n  max-width: 700px;\n`;\n\nexport const TextWrapper = styled(\"div\")`\n  border-radius: 3rem;\n  max-width: 400px;\n`;\n","import { withTranslation } from \"react-i18next\";\nimport { Container, TextWrapper, Content } from \"./styles\";\n\ninterface Props {\n  title: string;\n  content: string;\n  t: any;\n}\n\nconst Block = ({ title, content, t }: Props) => {\n  return (\n    <Container>\n      <h6>{t(title)}</h6>\n      <TextWrapper>\n        <Content>{t(content)}</Content>\n      </TextWrapper>\n    </Container>\n  );\n};\n\nexport default withTranslation()(Block);\n","import styled from \"styled-components\";\n\nexport const Container = styled(\"div\")`\n  display: inline-block;\n  width: 100%;\n  padding: 10px 5px;\n    \n\n`;\n\nexport const StyledInput = styled(\"input\")`\n  font-size: 0.875rem;\n  border: 1px solid #cacaca;\n  \n`;\n","import styled from \"styled-components\";\n\nexport const StyledContainer = styled(\"div\")`\n  display: inline-block;\n  width: 100%;\n  padding: 10px 5px;\n  margin-bottom: -0.625rem;\n`;\n\nexport const StyledTextArea = styled(\"textarea\")`\n  resize: none;\n  font-size: 0.875rem;\n  height: 185px;\n  border: 1px solid #cacaca;\n`;\n\nexport const Label = styled(\"label\")`\n  display: block;\n  padding-bottom: 10px;\n  text-transform: capitalize;\n`;\n","import { withTranslation } from \"react-i18next\";\nimport { Container, StyledInput } from \"./styles\";\nimport { Label } from \"../TextArea/styles\";\nimport { InputProps } from \"../types\";\n\nconst Input = ({ name, placeholder, onChange, t }: InputProps) => (\n  <Container>\n    <Label htmlFor={name}>{t(name)}</Label>\n    <StyledInput\n      placeholder={t(placeholder)}\n      name={name}\n      id={name}\n      onChange={onChange}\n    />\n  </Container>\n);\n\nexport default withTranslation()(Input);\n","import { withTranslation } from \"react-i18next\";\nimport { StyledTextArea, StyledContainer, Label } from \"./styles\";\nimport { InputProps } from \"../types\";\n\nconst TextArea = ({ name, placeholder, onChange, t }: InputProps) => (\n  <StyledContainer>\n    <Label htmlFor={name}>{t(name)}</Label>\n    <StyledTextArea\n      placeholder={t(placeholder)}\n      id={name}\n      name={name}\n      onChange={onChange}\n    />\n  </StyledContainer>\n);\n\nexport default withTranslation()(TextArea);\n","import styled from \"styled-components\";\n\nexport const ContactContainer = styled(\"div\")`\n  padding: 5rem 0;\n\n  @media only screen and (max-width: 1024px) {\n    padding: 3rem 0;\n  }\n`;\n\nexport const FormGroup = styled(\"form\")`\n  width: 100%;\n  max-width: 520px;\n\n  @media only screen and (max-width: 1045px) {\n    max-width: 100%;\n    margin-top: 2rem;\n  }\n`;\n\nexport const Span = styled(\"span\")<any>`\n  display: block;\n  font-weight: 600;\n  color: #B64F50;\n  height: 0.775rem;\n  padding: 0 0.675rem;\n`;\n\nexport const ButtonContainer = styled(\"div\")`\n  text-align: end;\n  position: relative;\n\n  @media only screen and (max-width: 414px) {\n    padding-top: 0.75rem;\n  }\n`;\n","import { Row, Col } from \"antd\";\nimport { withTranslation } from \"react-i18next\";\nimport { Slide, Zoom } from \"react-awesome-reveal\";\nimport { ContactProps, ValidationTypeProps } from \"./types\";\nimport { useForm } from \"../../common/utils/useForm\";\nimport { Button } from \"../../common/Button\";\nimport Block from \"../Block\";\nimport Input from \"../../common/Input\";\nimport TextArea from \"../../common/TextArea\";\nimport { notification } from \"antd\";\nimport { ContactContainer, FormGroup, Span, ButtonContainer } from \"./styles\";\n\nconst Contact = ({ title, content, id, t, carregar }: ContactProps) => {\n  const openNotificationWithIcon = (tipo: 'success' | 'error') => {\n    if (tipo === 'success') {\n      notification[\"success\"]({\n        message: t(\"Success\"),\n        description: t(\"Message sent!\"),\n      });\n    } else if (tipo === 'error') {\n      notification[\"error\"]({\n        message: t(\"Error\"),\n        description: t(\"Message not sent!\"),\n      });\n    }\n  };\n\n  const { values, errors, handleChange, handleSubmit } = useForm(\n    carregar, openNotificationWithIcon\n  ) as any;\n\n  const ValidationType = ({ type }: ValidationTypeProps) => {\n    const ErrorMessage = errors[type];\n    return (\n      <Zoom direction=\"left\">\n        <Span erros={errors[type]}>{t(ErrorMessage)}</Span>\n      </Zoom>\n    );\n  };\n\n  return (\n    <ContactContainer id={id}>\n      <Row justify=\"space-between\" align=\"middle\">\n        <Col lg={12} md={11} sm={24} xs={24}>\n          <Slide direction=\"left\">\n            <Block title={title} content={content} />\n          </Slide>\n        </Col>\n        <Col lg={12} md={12} sm={24} xs={24}> \n          <Slide direction=\"right\">\n            <FormGroup autoComplete=\"off\" onSubmit={handleSubmit}>\n              <Col span={24}>\n                <Input\n                  type=\"text\"\n                  name=\"name\"\n                  placeholder=\"Your Name\"\n                  value={values.name}\n                  onChange={handleChange}\n                />\n                <ValidationType type=\"name\" />\n              </Col>\n              <Col span={24}>\n                <Input\n                  type=\"text\"\n                  name=\"email\"\n                  placeholder=\"Your Email\"\n                  value={values.email}\n                  onChange={handleChange}\n                />\n                <ValidationType type=\"email\" />\n              </Col>\n              <Col span={24}>\n                <TextArea\n                  placeholder=\"Your Message\"\n                  value={values.message}\n                  name=\"message\"\n                  onChange={handleChange}\n                />\n                <ValidationType type=\"message\" />\n              </Col>\n              <ButtonContainer>\n                <Button className=\"contactSubmit\" name=\"submit\">{t(\"Submit\")}</Button>\n              </ButtonContainer>\n            </FormGroup>\n          </Slide>\n        </Col>\n      </Row>\n    </ContactContainer>\n  );\n};\n\nexport default withTranslation()(Contact);","import { useState, useEffect } from \"react\";\nimport emailjs from '@emailjs/browser';\n\ntype FormValues = {\n  name: string;\n  email: string;\n  message: string;\n};\n\ntype FormErrors = {\n  name?: string;\n  email?: string;\n  message?: string;\n};\n\nconst validate = (values: FormValues): FormErrors => {\n  let errors: FormErrors = {};\n\n  if (!values.name) {\n    errors.name = 'Name is required';\n  }\n\n  if (!values.email) {\n    errors.email = 'Email is required';\n  } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\n    errors.email = 'Email address is invalid';\n  }\n\n  if (!values.message) {\n    errors.message = 'Message is required';\n  }\n\n  return errors;\n};\n\nexport const useForm = (\n  carregar: (loading: boolean) => void,\n  openNotificationWithIcon: (type: 'success' | 'error') => void\n) => {\n  const [values, setValues] = useState<FormValues>({ name: '', email: '', message: '' });\n  const [errors, setErrors] = useState<FormErrors>({});\n  const [shouldSubmit, setShouldSubmit] = useState(false);\n  const [emailSent, setEmailSent] = useState(false);\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const validationErrors = validate(values);\n    setErrors(validationErrors);\n\n    if (Object.keys(validationErrors).length === 0) {\n      setShouldSubmit(true);\n    }\n  };\n\n  useEffect(() => {\n    if (shouldSubmit) {\n      carregar(true);\n\n      const templateParams = {\n        from_name: values.name,\n        reply_to: values.email,\n        message: values.message,\n      };\n\n      emailjs.send('service_tsqncfl', 'template_n281ssn', templateParams, 'VPWshh0QHyiBo4Lc_')\n        .then(response => {\n          carregar(false);\n          openNotificationWithIcon('success');\n          setEmailSent(true);\n        })\n        .catch(error => {\n          carregar(false);\n          openNotificationWithIcon('error');\n        })\n        .finally(() => {\n          setShouldSubmit(false);\n        });\n    }\n  }, [shouldSubmit]);\n\n  useEffect(() => {\n    if (emailSent) {\n      setValues({ name: '', email: '', message: '' });\n      setEmailSent(false);\n    }\n  }, [emailSent]);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = event.target;\n    setValues((prevValues) => ({\n      ...prevValues,\n      [name]: value,\n    }));\n    setErrors((prevErrors) => ({ ...prevErrors, [name]: \"\" }));\n  };\n\n  return {\n    handleChange,\n    handleSubmit,\n    values,\n    errors,\n  };\n};"],"names":["StyledButton","styled","p","color","Button","fixedWidth","children","onClick","className","Content","Container","TextWrapper","withTranslation","title","content","t","StyledInput","StyledContainer","StyledTextArea","Label","name","placeholder","onChange","htmlFor","id","ContactContainer","FormGroup","Span","ButtonContainer","carregar","openNotificationWithIcon","useState","email","message","values","setValues","errors","setErrors","shouldSubmit","setShouldSubmit","emailSent","setEmailSent","useEffect","templateParams","from_name","reply_to","emailjs","then","response","catch","error","finally","handleChange","event","target","value","prevValues","prevErrors","handleSubmit","preventDefault","validationErrors","test","validate","Object","keys","length","useForm","tipo","notification","description","ValidationType","type","ErrorMessage","direction","erros","justify","align","lg","md","sm","xs","autoComplete","onSubmit","span"],"sourceRoot":""}